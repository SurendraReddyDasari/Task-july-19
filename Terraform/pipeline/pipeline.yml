trigger:
  - main

pool:
  vmImage: 'windows-latest'

jobs:
  - job: Build
    displayName: Build
    steps:
      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '**/*.sln'

      - task: VSBuild@1
        inputs:
          solution: '**/*.sln'
          platform: 'Any CPU'
          configuration: 'Release'

      - task: VSTest@2
        inputs:
          platform: 'Any CPU'
          configuration: 'Release'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

  - job: TerraformPlan
    displayName: Terraform Plan
    dependsOn: Build
    steps:
      - script: |
          choco install terraform -y 
          terraform version
        displayName: 'Terraform Version'

      - script: |
          terraform -chdir=Terraform/main/ init -input=false
        displayName: 'Init'
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

      - script: |
          terraform -chdir=Terraform/main/ validate
        displayName: 'Validate'

      - script: |
          terraform -chdir=Terraform/main/ plan -input=false
        displayName: 'Plan'
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

  - job: TerraformApply
    displayName: Terraform Apply
    dependsOn: TerraformPlan
    steps:
      - script: |
          choco install terraform -y 
          terraform version
        displayName: 'Terraform Version'

      - script: |
          terraform -chdir=Terraform/main/ init -input=false
        displayName: 'Init'
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

      - script: |
          terraform -chdir=Terraform/main/ apply -auto-approve -input=false
        displayName: 'Apply'
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
  - job: CD
    displayName: Deploy to Azure Web App - CD
    dependsOn: CI
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifacts'
        inputs:
          artifactName: 'publish'
          downloadPath: '$(Pipeline.Workspace)/publish'

      - task: AzureRmWebAppDeployment@4
        displayName: 'Deploy Azure App Service'
        inputs:
          azureSubscription: '$(Parameters.ConnectedServiceName)'
          appType: '$(Parameters.WebAppLinux)'
          WebAppName: '$(Parameters.WebAppName)'
          package: '$(Pipeline.Workspace)/publish/**/*.zip'
          RuntimeStack: 'DOTNETCORE|7.0'
          
